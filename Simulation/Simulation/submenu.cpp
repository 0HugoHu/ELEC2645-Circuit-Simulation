// Implementation of the sub-menus

#include "submenu.h"

#include <iostream>

// Not finished yet
int _TemplateFunction::RLC(int _position) { return 0; }

int _TemplateFunction::Diodes(int _position) { return 0; }

//***************** Yadong Hu *****************
int _TemplateFunction::IVConverter(int _position) {
  // The following switch() structure is pretty messy, here I show you the basic
  // structure: Choose Option: 1.Edit value    2.Edit
  // colour    3.Analysis    4.Reload    5.Return
  //
  // (if you choose 1, e.g.)
  // Choose Option:
  // 1. Amplifier    2.Current Source    3.Voltage Source    4. ...
  //
  // (if you choose 2, e.g.)
  // Enter the new value:
  //
  // (you entered a valid value)
  //
  // Changed succeeded!
  // Reload circuit in xx seconds...
  //
  // (go back to the first option)

  // !!!No further comments below, since they are generated by copy-paste my own
  // codes, and only modified a few lines. Please refer to my individual diaray
  // for outcome presentation.

  // goto() back point 1
start_point_IV_1:
  int choosing = 0;
  bool invalidChosen = false;
  // if the user chose a invalide value, then repeat
  do {
    if (invalidChosen) {
      // show the error message
      _Helper::errorMessage(_position + 3,
                            "Please input a valid menu number (0 - 4)!");
    }
    // set start position, the colour
    HANDLE consolehwnd;
    consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(consolehwnd,
                            _Helper::convertColorNameToHex(DARK_CYAN, 0));
    _Helper::locateCursorAt(4, _position);
    std::cout << "★";
    SetConsoleTextAttribute(consolehwnd,
                            _Helper::convertColorNameToHex(WHITE, 0));
    _Helper::locateCursorAt(7, _position);
    std::cout << "Choose a function:";
    _Helper::locateCursorAt(7, _position + 1);
    std::cout << "1 - Change value       2 - Change colour       3 - Analyse   "
                 "    4 - Refresh diagram      0 - Back";
    _Helper::locateCursorAt(4, _position + 3);
    std::cout << ">> ";
    SetConsoleTextAttribute(consolehwnd,
                            _Helper::convertColorNameToHex(YELLOW, 0));
    std::cin >> choosing;
    SetConsoleTextAttribute(consolehwnd,
                            _Helper::convertColorNameToHex(WHITE, 0));
  } while (invalidChosen = !(choosing == 1 || choosing == 2 || choosing == 3 ||
                             choosing == 4 || choosing == 0));
  switch (choosing) {
      // case 1: edit component value
    case 1: {
    start_point_IV_1_1:
      int choosing_2 = 0;
      invalidChosen = false;
      do {
        if (invalidChosen) {
          _Helper::errorMessage(_position + 9,
                                "Please input a valid menu number (1 - 8)!");
        }
        HANDLE consolehwnd;
        consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(DARK_CYAN, 0));
        _Helper::locateCursorAt(4, _position + 5);
        std::cout << "★";
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
        _Helper::locateCursorAt(7, _position + 5);
        std::cout << "Choose a component to be changed (O to turn back):";
        _Helper::locateCursorAt(7, _position + 6);
        std::cout << "1 - Noise Source       2 - Current Source (I0)    3 - "
                     "Capacitor 1 (C1)       4 - Feedback Capacitor (Cf)";
        _Helper::locateCursorAt(7, _position + 7);
        std::cout << "5 - Voltage in (V+)    6 - Voltage out (V-)       7 - "
                     "Op-amp (CA3140E)       8 - Feedback Resistor (Rf)";
        _Helper::locateCursorAt(4, _position + 9);
        std::cout << ">>  ";
        _Helper::locateCursorAt(7, _position + 9);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(YELLOW, 0));
        std::cin >> choosing_2;
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
      } while (invalidChosen =
                   !(choosing_2 == 1 || choosing_2 == 2 || choosing_2 == 3 ||
                     choosing_2 == 4 || choosing_2 == 5 || choosing_2 == 6 ||
                     choosing_2 == 7 || choosing_2 == 8 || choosing_2 == 0));
      switch (choosing_2) {
          // chose the component to be changed
        case 0: {
          _Helper::clearScreen(_position, 10);
          goto start_point_IV_1;
        }
        case 1: {
        start_point_IV_1_1_1:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "NOISE_SOURCE", 0,
                                 _Helper::cutTailingZeros(change_value),
                                 2) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_1;
            }
          }
        }
        case 2: {
        start_point_IV_1_1_2:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "CURRENT_SOURCE", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_2;
            }
          }
        }
        case 3: {
        start_point_IV_1_1_3:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "CAPACITOR", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");

              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_3;
            }
          }
        }
        case 4: {
        start_point_IV_1_1_4:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "CAPACITOR_FEEDBACK", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");

              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_4;
            }
          }
        }
        case 5: {
        start_point_IV_1_1_5:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "VOLTAGE_SOURCE_P", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");

              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_5;
            }
          }
        }
        case 6: {
        start_point_IV_1_1_6:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "VOLTAGE_SOURCE_N", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");

              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_6;
            }
          }
        }
        case 7: {
          _Helper::errorMessage(_position + 10,
                                "Amplifier cannot be changed temporarily!");
          goto start_point_IV_1_1;
        }
        case 8: {
        start_point_IV_1_1_8:
          double change_value = 0;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new value (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your input value. Fault value "
                       "may crash the analysis process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == 0) {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_1;
          } else {
            if (_Helper::readTXT("IVConverter", "RESISTOR_FEEDBACK", 3,
                                 _Helper::cutTailingZeros(change_value),
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");

              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_1_8;
            }
          }
        }
      }
      break;
    }
    case 2: {
    start_point_IV_1_2:
      int choosing_2 = 0;
      invalidChosen = false;
      do {
        if (invalidChosen) {
          _Helper::errorMessage(_position + 9,
                                "Please input a valid menu number (1 - 8)!");
        }
        HANDLE consolehwnd;
        consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(DARK_CYAN, 0));
        _Helper::locateCursorAt(4, _position + 5);
        std::cout << "★";
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
        _Helper::locateCursorAt(7, _position + 5);
        std::cout
            << "Choose a component to change the colour (O to turn back):";
        _Helper::locateCursorAt(7, _position + 6);
        std::cout << "1 - Noise Source       2 - Current Source (I0)    3 - "
                     "Capacitor 1 (C1)       4 - Feedback Capacitor (Cf)";
        _Helper::locateCursorAt(7, _position + 7);
        std::cout << "5 - Voltage in (V+)    6 - Voltage out (V-)       7 - "
                     "Op-amp (CA3140E)       8 - Feedback Resistor (Rf)";
        _Helper::locateCursorAt(4, _position + 9);
        std::cout << ">>  ";
        _Helper::locateCursorAt(7, _position + 9);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(YELLOW, 0));
        std::cin >> choosing_2;
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
      } while (invalidChosen =
                   !(choosing_2 == 1 || choosing_2 == 2 || choosing_2 == 3 ||
                     choosing_2 == 4 || choosing_2 == 5 || choosing_2 == 6 ||
                     choosing_2 == 7 || choosing_2 == 8 || choosing_2 == 0));
      switch (choosing_2) {
        case 0: {
          _Helper::clearScreen(_position, 10);
          goto start_point_IV_1;
        }
        case 1: {
        start_point_IV_1_2_1:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "NOISE_SOURCE", 1, change_value,
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_1;
            }
          }
        }
        case 2: {
        start_point_IV_1_2_2:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "CURRENT_SOURCE", 1,
                                 change_value, 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_2;
            }
          }
        }
        case 3: {
        start_point_IV_1_2_3:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "CAPACITOR", 1, change_value,
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_3;
            }
          }
        }
        case 4: {
        start_point_IV_1_2_4:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "CAPACITOR_FEEDBACK", 1,
                                 change_value, 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_4;
            }
          }
        }
        case 5: {
        start_point_IV_1_2_5:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "VOLTAGE_SOURCE_P", 1,
                                 change_value, 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_5;
            }
          }
        }
        case 6: {
        start_point_IV_1_2_6:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "VOLTAGE_SOURCE_N", 1,
                                 change_value, 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_6;
            }
          }
        }
        case 7: {
        start_point_IV_1_2_7:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "AMPLIFIER", 1, change_value,
                                 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_7;
            }
          }
        }
        case 8: {
        start_point_IV_1_2_8:
          std::string change_value;
          HANDLE consolehwnd;
          consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(DARK_CYAN, 0));
          _Helper::locateCursorAt(4, _position + 11);
          std::cout << "★";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 11);
          std::cout << "Enter a new background colour (O to turn back):";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(RED, 0));
          _Helper::locateCursorAt(4, _position + 12);
          std::cout << "!!";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          _Helper::locateCursorAt(7, _position + 12);
          std::cout << "Please carefully check your new colour. Fault colour "
                       "may crash the drawing process!";
          _Helper::locateCursorAt(4, _position + 14);
          std::cout << ">> ";
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(YELLOW, 0));
          std::cin >> change_value;
          SetConsoleTextAttribute(consolehwnd,
                                  _Helper::convertColorNameToHex(WHITE, 0));
          if (change_value == "0") {
            _Helper::clearScreen(_position + 9, 15);
            goto start_point_IV_1_2;
          } else {
            if (_Helper::readTXT("IVConverter", "RESISTOR_FEEDBACK", 1,
                                 change_value, 1) == SUCCESS) {
              _Helper::locateCursorAt(4, _position + 15);
              _Helper::successMessage(_position + 15,
                                      "Property changed succeeded!",
                                      "Reload circuit in");
              system("cls");
              return 1;
            } else {
              _Helper::errorMessage(_position + 15, "Wrote failed!");
              goto start_point_IV_1_2_8;
            }
          }
        }
      }
      break;
    }
    case 3: {
      HANDLE consolehwnd;
      consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
      SetConsoleTextAttribute(consolehwnd,
                              _Helper::convertColorNameToHex(DARK_CYAN, 0));
      _Helper::locateCursorAt(4, _position + 5);
      std::cout << "★";
      SetConsoleTextAttribute(consolehwnd,
                              _Helper::convertColorNameToHex(WHITE, 0));
      _Helper::locateCursorAt(7, _position + 5);
      std::cout << "Analysis Outcome (Only the first 20 bits are shown):\n\n";

      std::cout << std::left;
      std::cout << "       "
                << "#Bit" << std::setw(8) << "┃"
                << "   I0" << std::setw(8) << "┃"
                << "Noise" << std::setw(8) << "┃"
                << "OP1 In" << std::setw(8) << "┃"
                << "IVC Out" << std::setw(8) << "┃"
                << "OP2 In" << std::setw(8) << "┃"
                << "COM Out" << std::setw(8) << "┃"
                << " Out"
                << "┃ " << std::endl;
      std::cout << "       "
                   "━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━━╋━━━━━━━━━━━━━╋━━━"
                   "━━━━━━━━━╋━━━━━━━━━━━━━╋━━━━━━━━━━┫"
                << std::endl;

      int bit = 0, Output2 = 0;
      float A0 = 2, A1 = 2.5, Output1 = 0, Input2 = 0, o = 0;
      std::string time;
      // A0 is the magnification from input bit to currnet
      std::vector<double> Input;
      std::vector<double> Input1;
      std::string _filename = "rawData.txt";
      std::ifstream infile2(_filename, std::ios::in);
      if (!infile2) {
        std::cout << "open error!" << std::endl;
        exit(1);
      }
      std::string _line = "";
      std::vector<std::string> _v;
      std::vector<std::string> _w;
      while (getline(infile2, _line, '\n')) {
        _v.push_back(_line);
      }
      infile2.close();
      for (unsigned int i = 0; i < _v.at(0).length(); i++) {
        Input.push_back((0.01) * (double)((_v.at(0).at(i)) - 48));
      }

      std::string _filename2 = "noiseData.txt";
      std::ifstream infile3(_filename2, std::ios::in);
      if (!infile3) {
        std::cout << "open error!" << std::endl;
        exit(1);
      }
      _line = "";
      _v.clear();
      _w.clear();
      while (getline(infile3, _line, '\n')) {
        _v.push_back(_line);
      }
      infile3.close();
      std::string temp;
      for (unsigned int j = 0; j < _v.size(); j++) {
        for (unsigned int i = 0; i < _v.at(j).length(); i++) {
          temp += _v.at(j).at(i);
        }
        Input1.push_back((0.01) * std::stof(temp));
        temp = "";
      }

      for (int i = 0; i < Input.size() && i < 20; i++) {
        o++;
        if (o < 10) {
          time = "0" + _Helper::cutTailingZeros(o);
        } else {
          time = _Helper::cutTailingZeros(o);
        }
        Output1 = Input1.at(i) * A1;

        float v = A0 * A1 / 2;
        Input2 = Output1 - v;

        if (Input2 >= -2.5) {
          Output2 = 5;
        } else {
          Output2 = 0;
        }

        if (Output2 == 5) {
          bit = 1;
        } else if (Output2 == 0) {
          bit = 0;
        }

        if (Input2 <= -100) Input2 = -99.999;

        std::cout << std::setprecision(3) << std::fixed;
        std::cout << "         " << time << std::setw(8) << "┃" << Input[i]
                  << std::setw(7) << "┃" << std::showpos
                  << Input1.at(i) - Input.at(i) << std::setw(8) << "┃"
                  << Input1.at(i) << std::setw(9) << "┃" << Output1
                  << std::setw(8) << "┃" << Input2 << std::setw(14) << "┃"
                  << std::noshowpos << Output2 << std::setw(9) << "┃"
                  << std::setw(3) << bit << "┃" << std::endl;
      }
      int choosing_2 = 0;
      do {
        if (invalidChosen) {
          _Helper::errorMessage(_position + 9, "Please input '0' to go back!");
        }
        HANDLE consolehwnd;
        consolehwnd = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(DARK_CYAN, 0));
        _Helper::locateCursorAt(4, _position + 31);
        std::cout << "★";
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
        _Helper::locateCursorAt(7, _position + 31);
        std::cout << "Press 0 to turn back:";
        _Helper::locateCursorAt(4, _position + 33);
        std::cout << ">>  ";
        _Helper::locateCursorAt(7, _position + 33);
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(YELLOW, 0));
        std::cin >> choosing_2;
        SetConsoleTextAttribute(consolehwnd,
                                _Helper::convertColorNameToHex(WHITE, 0));
      } while (invalidChosen = !(choosing_2 == 0));
      _Helper::clearScreen(_position, 50);
      SetConsoleTextAttribute(consolehwnd,
                              _Helper::convertColorNameToHex(WHITE, 0));
      goto start_point_IV_1;
    }
    case 4:
      _Helper::locateCursorAt(4, _position + 3);
      std::cout << ">>    ";
      return 1;
    case 0:
      return 0;
  }
}
//***************** Yadong Hu *****************

//***************** Yusen Liu *****************
int _TemplateFunction::Comparator(int _position) { return 0; }
//***************** Yusen Liu *****************

//***************** Keyi Zhou *****************
int _TemplateFunction::Detector(int _position) { return 0; }
//***************** Keyi Zhou *****************
